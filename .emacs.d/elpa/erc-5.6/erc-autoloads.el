;;; erc-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from erc.el

(dolist (symbol '( erc-sasl erc-spelling ; 29
                  erc-imenu erc-nicks)) ; 30
 (custom-add-load symbol symbol))
(custom-autoload 'erc-modules "erc")
(autoload 'erc-select-read-args "erc" "\
Prompt for connection parameters and return them in a plist.
By default, collect `:server', `:port', `:nickname', and
`:password'.  With a non-nil prefix argument, also prompt for
`:user' and `:full-name'.  Also return various environmental
properties needed by entry-point commands, like `erc-tls'.")
(autoload 'erc-server-select "erc" "\
Interactively connect to a server from `erc-server-alist'." t)
(make-obsolete 'erc-server-select 'erc-tls "30.1")
(autoload 'erc "erc" "\
Connect to an Internet Relay Chat SERVER on a non-TLS PORT.
Use NICK and USER, when non-nil, to inform the IRC commands of
the same name, possibly factoring in a non-nil FULL-NAME as well.
When PASSWORD is non-nil, also send an opening server password
via the \"PASS\" command.  Interactively, prompt for SERVER,
PORT, NICK, and PASSWORD, along with USER and FULL-NAME when
given a prefix argument.  Non-interactively, expect the rarely
needed ID parameter, when non-nil, to be a symbol or a string for
naming the server buffer and identifying the connection
unequivocally.  Once connected, return the server buffer.  (See
Info node `(erc) Connecting' for details about all mentioned
parameters.)

Together with `erc-tls', this command serves as the main entry
point for ERC, the powerful, modular, and extensible IRC client.
Non-interactively, both commands accept the following keyword
arguments, with their defaults supplied by the indicated
\"compute\" functions:

  :server    `erc-compute-server'
  :port      `erc-compute-port'
  :nick      `erc-compute-nick'
  :user      `erc-compute-user'
  :password   N/A
  :full-name `erc-compute-full-name'
  :id'        N/A

For example, when called in the following manner

   (erc :server \"irc.libera.chat\" :full-name \"J. Random Hacker\")

ERC assigns SERVER and FULL-NAME the associated keyword values
and defers to `erc-compute-port', `erc-compute-user', and
`erc-compute-nick' for those respective parameters.

(fn &key SERVER PORT NICK USER PASSWORD FULL-NAME ID)" t)
(defalias 'erc-select #'erc)
(autoload 'erc-tls "erc" "\
Connect to an IRC server over a TLS-encrypted connection.
Interactively, prompt for SERVER, PORT, NICK, and PASSWORD, along
with USER and FULL-NAME when given a prefix argument.
Non-interactively, also accept a CLIENT-CERTIFICATE, which should
be a list containing the file name of the certificate's key
followed by that of the certificate itself.  Alternatively,
accept a value of t instead of a list, to tell ERC to query
`auth-source' for the certificate's details.

Example client certificate (CertFP) usage:

    (erc-tls :server \"irc.libera.chat\" :port 6697
             :client-certificate
             \\='(\"/home/bandali/my-cert.key\"
               \"/home/bandali/my-cert.crt\"))

See the alternative entry-point command `erc' as well as Info
node `(erc) Connecting' for a fuller description of the various
parameters, like ID.

(fn &key SERVER PORT NICK USER PASSWORD FULL-NAME CLIENT-CERTIFICATE ID)" t)
(autoload 'erc-handle-irc-url "erc" "\
Use ERC to IRC on HOST:PORT in CHANNEL.
If ERC is already connected to HOST:PORT, simply /join CHANNEL.
Otherwise, connect to HOST:PORT as NICK and /join CHANNEL.

Beginning with ERC 5.5, new connections require human intervention.
Customize `erc-url-connect-function' to override this.

(fn HOST PORT CHANNEL NICK PASSWORD &optional SCHEME)")
(register-definition-prefixes "erc" '("erc-"))


;;; Generated autoloads from erc-autoaway.el

(register-definition-prefixes "erc-autoaway" '("erc-auto"))


;;; Generated autoloads from erc-backend.el

(register-definition-prefixes "erc-backend" '("erc-"))


;;; Generated autoloads from erc-button.el

(register-definition-prefixes "erc-button" '("erc-"))


;;; Generated autoloads from erc-capab.el

(register-definition-prefixes "erc-capab" '("erc-capab-identify-"))


;;; Generated autoloads from erc-common.el

(register-definition-prefixes "erc-common" '("define-erc-module" "erc-"))


;;; Generated autoloads from erc-compat.el

(register-definition-prefixes "erc-compat" '("erc-"))


;;; Generated autoloads from erc-dcc.el

(register-definition-prefixes "erc-dcc" '("erc-" "pcomplete/erc-mode/"))


;;; Generated autoloads from erc-desktop-notifications.el

(register-definition-prefixes "erc-desktop-notifications" '("erc-notifications-"))


;;; Generated autoloads from erc-ezbounce.el

(register-definition-prefixes "erc-ezbounce" '("erc-ezb-"))


;;; Generated autoloads from erc-fill.el

(register-definition-prefixes "erc-fill" '("erc-"))


;;; Generated autoloads from erc-goodies.el

(register-definition-prefixes "erc-goodies" '("erc-"))


;;; Generated autoloads from erc-ibuffer.el

(register-definition-prefixes "erc-ibuffer" '("erc-"))


;;; Generated autoloads from erc-identd.el

(register-definition-prefixes "erc-identd" '("erc-identd-"))


;;; Generated autoloads from erc-imenu.el

(register-definition-prefixes "erc-imenu" '("erc-"))


;;; Generated autoloads from erc-join.el

(register-definition-prefixes "erc-join" '("erc-"))


;;; Generated autoloads from erc-lang.el

(register-definition-prefixes "erc-lang" '("erc-cmd-LANG" "iso-639-1-languages" "language"))


;;; Generated autoloads from erc-list.el

(register-definition-prefixes "erc-list" '("erc-"))


;;; Generated autoloads from erc-log.el

(register-definition-prefixes "erc-log" '("erc-"))


;;; Generated autoloads from erc-match.el

(register-definition-prefixes "erc-match" '("erc-"))


;;; Generated autoloads from erc-menu.el

(register-definition-prefixes "erc-menu" '("erc-menu-"))


;;; Generated autoloads from erc-netsplit.el

(register-definition-prefixes "erc-netsplit" '("erc-"))


;;; Generated autoloads from erc-networks.el

(autoload 'erc-determine-network "erc-networks" "\
Return the name of the network or \"Unknown\" as a symbol.
Use the server parameter NETWORK if provided, otherwise parse the
server name and search for a match in `erc-networks-alist'.")
(make-obsolete 'erc-determine-network '"maybe see `erc-networks--determine'" "29.1")
(register-definition-prefixes "erc-networks" '("erc-"))


;;; Generated autoloads from erc-nicks.el

(register-definition-prefixes "erc-nicks" '("erc-nicks-"))


;;; Generated autoloads from erc-notify.el

(register-definition-prefixes "erc-notify" '("erc-"))


;;; Generated autoloads from erc-page.el

(register-definition-prefixes "erc-page" '("erc-"))


;;; Generated autoloads from erc-pcomplete.el

(register-definition-prefixes "erc-pcomplete" '("erc-pcomplet" "pcomplete"))


;;; Generated autoloads from erc-replace.el

(register-definition-prefixes "erc-replace" '("erc-replace-"))


;;; Generated autoloads from erc-ring.el

(register-definition-prefixes "erc-ring" '("erc-"))


;;; Generated autoloads from erc-sasl.el

(register-definition-prefixes "erc-sasl" '("erc-sasl-"))


;;; Generated autoloads from erc-services.el

(register-definition-prefixes "erc-services" '("erc-"))


;;; Generated autoloads from erc-sound.el

(register-definition-prefixes "erc-sound" '("erc-"))


;;; Generated autoloads from erc-speedbar.el

(register-definition-prefixes "erc-speedbar" '("erc-"))


;;; Generated autoloads from erc-spelling.el

(register-definition-prefixes "erc-spelling" '("erc-spelling-"))


;;; Generated autoloads from erc-stamp.el

(register-definition-prefixes "erc-stamp" '("erc-"))


;;; Generated autoloads from erc-status-sidebar.el

(register-definition-prefixes "erc-status-sidebar" '("erc-status-sidebar-"))


;;; Generated autoloads from erc-track.el

(register-definition-prefixes "erc-track" '("erc-"))


;;; Generated autoloads from erc-truncate.el

(register-definition-prefixes "erc-truncate" '("erc-"))


;;; Generated autoloads from erc-xdcc.el

(register-definition-prefixes "erc-xdcc" '("erc-"))

;;; End of scraped data

(provide 'erc-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; erc-autoloads.el ends here
