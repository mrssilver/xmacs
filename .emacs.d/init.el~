

(package-initialize)
(require 'package)
;;(add-to-list 'package-archives
;;           '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
            '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'rainbow-mode)
(require 'imperial-layout)




(load-theme 'imperial-gold t)
(set-frame-position (selected-frame) 0 0)
(set-frame-width (selected-frame) 190)
(set-frame-height (selected-frame) 59)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(preview-auto gotest-ts colorful-mode lsp-ui org-pdftools go-autocomplete org-translate dot-mode org-evil go-gen-test company-go go-gopath go-complete org-ai rainbow-blocks graphviz-dot-mode go-imports general minimap org-journal async isearch-mb spell-fu ## evil ess slime commenter go-dlv gotest magithub go-eldoc go-guru go-errcheck ffmpeg-player esup use-package org-remark rainbow-mode auto-correct auto-dim-other-buffers python erc rainbow-delimiters popon multiple-cursors minibuffer-header minibuffer-line minibar company-statistics perl-doc ztree pdf-tools org emacsql gited dracula-theme diminish diff-hl magit git-modes go-mode markdown-mode memory-usage)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(rainbow-delimiters-base-error-face ((t (:inherit rainbow-delimiters-base-face :foreground "light green"))))
 '(rainbow-delimiters-base-face ((t (:inherit nil))))
 '(rainbow-delimiters-depth-1-face ((t (:inherit rainbow-delimiters-base-face :foreground "NavajoWhite3"))))
 '(rainbow-delimiters-depth-2-face ((t (:inherit rainbow-delimiters-base-face :foreground "olive drab"))))
 '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "firebrick"))))
 '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "yellow1"))))
 '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "red4"))))
 '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "ivory1"))))
 '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "DarkOrange4"))))
 '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "wheat2"))))
 '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "gold1")))))
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
;;关闭默认界面
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode 1)
(scroll-bar-mode -1)
(global-font-lock-mode  t)
;;显示时间
(display-time-mode t)
;;设置默认模式
(setq initial-major-mode 'text-mode)
;;显示空白字符
(global-whitespace-mode t)
(setq whitespace-style '(face space tabs trailing lines-tail newline empty tab-mark newline-mark))
;;最近的文件
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)
(setq cache-directory "~/.emacs_cache")
;;(setq globalautorevertnonfilebuffers nil)
;;(setq globalautoreverttailedbuffers nil)
;;globalautorevertnonfilebuffers是用于控制非文件缓冲区（如dired缓冲区等）的自动刷新；globalautoreverttailedbuffers用于控制有“tail”模式（如某些日志文件查看模式）的缓冲区自动刷新。
;;如果想完全禁止自动刷新，包括文件内容更新后的自动重新读取，可以使用如下代码：
(setq globalautorevertmode nil)
;;自动刷新
;;(global-auto-revert-mode t)
;;这样设置之后，Emacs就不会自动检查文件是否被外部修改而进行刷新了。
;;要禁止Emacs自动保存，可以在Emacs的初始化文件（.emacs或init.el）中添加以下代码：
(setq auto-save-default nil)
;;这行代码将autosavedefault变量设置为nil，从而关闭自动保存功能。这样Emacs就不会自动为正在编辑的文件创建自动保存文件了。
;; 设置org目录
(setq org-directory "~/Documents/org")
(setq org-export-directory "~/Documents/org/org-exports")












(defun make-node (value left right)
 "Create a binary tree node."
 (list :value value :left left :right right))
(defun print-tree (node indent)
 "Print a binary tree in a readable format."
 (when node
   (print-tree (plist-get node :right) (+ indent 2))
   (insert (make-string indent ?\ ))
   (insert (format "%s\n" (plist-get node :value)))
   (print-tree (plist-get node :left) (+ indent 2))))
;; 创建一个简单的二叉树
;;(setq root (make-node 5
;;                      (make-node 3 (make-node 1 nil nil) (make-node 4 nil nil))
;;                      (make-node 8 nil (make-node 9 nil nil))))
;; 打印二叉树
;;(with-output-to-temp-buffer "*Binary Tree*"
;;  (print-tree root 0))
(defun insert-newline-every-m-chars (m n)
 "Insert a newline every M characters in the current buffer."
 (interactive "nStart line: \nsEnd line: ")
 (let ((start (point-min))
       (end (point-max)))
   (save-excursion
     (goto-char start)
     (while (< (point) end)
       (forward-char m)
       (insert n )))))
;;        (insert "\n")))))










;; 安装 Delve：go install github.com/go-delve/delve/cmd/dlv@latest
;;go install github.com/golangci/lsp/cmd/golangci-lsp@latest
;;go install golang.org/x/tools/gopls@latest
;; company-go：可选的代码补全工具（可与 lsp-go 配合使用）。
;; 调整 lsp-log-level 为 warn 减少日志输出：
;;(global-lsp-mode 1)

(imperial-setup-layout)
